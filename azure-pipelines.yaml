trigger:
- master
variables:
  python.version: '3.7.6'
  webAppName: 'webApp-AppService'
  azureServiceConnectionId: 'myConnection'
pool: myAgentPool
stages:
# ####################################################################
# #                       Prepare environment                        #
# ####################################################################
# - stage: Prepare
#   displayName: Prepare environment 
#   jobs: 
#   - deployment: deploy_terraform
#     continueOnError: false
#     environment: 'TEST'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#             - checkout: self

#             ######### Step 1: Install Terraform ##########
#             - task: Bash@3
#               displayName: install zip
#               inputs:
#                 targetType: 'inline'
#                 script: |
#                   # Write your commands here
#                   sudo apt-get -y install zip
#             # - task: TerraformInstaller@0
#             #   displayName: install terraform
#             #   inputs:
#             #     terraformVersion: 'latest'
#             - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
#               displayName: install terraform
#               inputs:
#                 terraformVersion: latest   

#             - task: Bash@3
#               displayName: init terraform
#               inputs:
#                 targetType: 'inline'
#                 script: |
#                   # Write your commands here
#                   cd terraform
#                   terraform init

#           ######### Step 2: Initialise workspace using terraform init ##########
            
#             - task: TerraformCLI@0
#               inputs:
#                 command: 'plan'
#                 workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#                 allowTelemetryCollection: true
#             # - task: Bash@3
#             #   displayName: plan terraform
#             #   inputs:
#             #     targetType: 'inline'
#             #     script: |
#             #       # Write your commands here
#             #       cd terraform
#             #       terraform plan

#             ######### Step 3: Deploy Webapp terraform apply ##########
#             - task: Bash@3
#               displayName: apply terraform
#               inputs:
#                 targetType: 'inline'
#                 script: |
#                   # Write your commands here
#                   cd terraform
#                   terraform apply -auto-approve


# ####################################################################
# #                       Build Fake App                             #
# ####################################################################

# - stage: BuildFakeRestAPI
#   jobs:
#   - job: 'BuildFakeapp'
#     displayName: 'Build Fake app Rest API'
#     pool:
#       name: myAgentPool
#       vmImage: 'ubuntu-18.04'
#     steps:
#     - task: ArchiveFiles@2
#       displayName: 'Archive FakeRestAPI'
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/fakerestapi'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
#       displayName: 'Upload Package'
#       artifact: fakerestapi

# ####################################################################
# #                       Deploy Fake App                            #
# ####################################################################
# - stage: DeployFakeApp
#   dependsOn: BuildFakeRestAPI
#   condition: succeeded()
#   jobs:
#   - deployment: FakeRestAPI
#     pool:
#       vmImage: 'Ubuntu-16.04'
#       name: myAgentPool
#     environment: 'DEV'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App'
#             inputs:
#               azureSubscription: $(azureServiceConnectionId)
#               appName: $(webAppName)
#               appType: webApp
#               package: $(Pipeline.Workspace)/fakerestapi/$(Build.BuildId)-fakerestapi.zip
            
####################################################################
#                       Build Test   zip                           #
####################################################################
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
      name: 'myAgentPool'
    steps:
#     - task: ArchiveFiles@2
#       displayName: 'Archive Selenium tests'
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium-tests.zip'
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium-tests.zip
#       displayName: 'Upload Selenium Tests'
#       artifact: selenium

#     - task: ArchiveFiles@2
#       displayName: 'Archive Postman tests'
#       inputs:
#         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-postman-tests.zip'
#     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-postman-tests.zip
#       displayName: 'Upload Postman Tests'
#       artifact: postman

      - task: ArchiveFiles@2
        displayName: 'Archive Jmeter tests'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-tests.zip'
      - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-tests.zip
        displayName: 'Upload JMeter Tests'
        artifact: jmeter

####################################################################
#                            Run Test                              #
####################################################################
- stage: RunTests     
  jobs:
  - deployment: UITests
    displayName: 'UI Tests'
    pool:
      vmImage: 'ubuntu-18.04'
      name: myAgentPool
    environment:  'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
#           - download: current
#             displayName: Download selenium
#             artifact: selenium 
#           - task: Bash@3
#             displayName: 'Install Selenium'
#             inputs:
#               targetType: 'inline'
#               script: |
#                 #! /bin/bash
                
#                 sudo apt-get upgrade -y
#                 sudo apt-get install python3-pip -y
#                 sudo apt-get install unzip -y
#                 sudo apt-get install -y chromium-browser
#                 sudo apt-get install -y chromium-chromedriver
#                 pip3 install selenium==3.141.0
#                 export PATH=$PATH:/usr/lib/chromium-browser/
#                 cd $(Pipeline.Workspace)/selenium
#                 unzip -o $(Pipeline.Workspace)/selenium/$(Build.BuildId)-selenium-tests -d .
#           - task: Bash@3
#             displayName: 'Run Selenium Tests'
#             inputs:
#               targetType: 'inline'
#               script: |
#                 # python3.7 /home/myagent/myagent/_work/1/selenium/login.py > /home/myagent/myagent/_work/1/selenium/seleniumtestrun.log
#                 python3 /home/myagent/myagent/_work/1/selenium/login.py | tee -a /home/myagent/myagent/_work/1/selenium/seleniumtestrun.log
#                 cat /home/myagent/myagent/_work/1/selenium/seleniumtestrun.log
#                 sudo cp /home/myagent/myagent/_work/1/selenium/seleniumtestrun.log /var/log
          
#           - download: current
#             displayName: Download postman
#             artifact: postman
#           - task: NodeTool@0
#             displayName: Install Node v16.X
#             inputs:
#               versionSpec: '16.x'
#           - task: Bash@3
#             displayName: 'Install newman'
#             inputs:
#               targetType: 'inline'
#               script: |
#                 sudo apt install nodejs npm -y
#                 nodejs --version
#                 npm install -g newman
#                 cd $(Pipeline.Workspace)/postman
#                 unzip -o $(Pipeline.Workspace)/postman/$(Build.BuildId)-postman-tests -d .
#           - bash: |
#               newman run /home/myagent/myagent/_work/1/postman/P3_Validation_Tests.postman_collection.json \
#                         -e /home/myagent/myagent/_work/1/postman/P3_Validation_Tests_Environment.postman_environment.json \
#                         --reporters cli,junit \
#                         --reporter-junit-export log/newman/validationTestReport.xml \
#                         --suppress-exit-code
#             displayName: Validation Test

#           - bash: |
#               newman run /home/myagent/myagent/_work/1/postman/P3_Regression_Tests.postman_collection.json \
#                      -e /home/myagent/myagent/_work/1/postman/P3_Regression_Tests_Environment.postman_environment.json \
#                      --reporters cli,junit \
#                      --reporter-junit-export log/newman/regressionTestReport.xml \
#                      --suppress-exit-code
#             displayName: Regression Test
          
#           - task: PublishPipelineArtifact@1
#             displayName: Publish Regression and Validation Test Reports as Artifacts
#             inputs:
#               targetPath: '$(System.DefaultWorkingDirectory)/log/newman'
#               artifactName: 'drop-integration-test'
#           - task: PublishTestResults@2
#             displayName: Publish Regression and Validation Test Reports
#             condition: always()
#             inputs:
#               testResultsFormat: 'JUnit'
#               testResultsFiles: '$(System.DefaultWorkingDirectory)/log/newman/*.xml'
#               mergeTestResults: true
#               testRunTitle: 'Regression and Validation Test Reports'

          - download: current
            displayName: Download postman
            artifact: jmeter
          - task: Bash@3
            displayName: Install JMeter
            inputs:
              targetType: 'inline'
              script: |
                sudo apt-get install openjdk-11-jre-headless -y
                wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.1.tgz -O jmeter.tgz
                tar -xzvf jmeter.tgz

                cd $(Pipeline.Workspace)/jmeter
                unzip -o $(Pipeline.Workspace)/jmeter/$(Build.BuildId)-jmeter-tests -d .
          
          - task: Bash@3
            displayName: Run JMeter tests
            inputs:
              targetType: 'inline'
              script: |
                apache-jmeter-5.4.1/bin/jmeter -n -t /home/myagent/myagent/_work/1/jmeter/endurance.jmx \
                  -l /home/myagent/myagent/_work/1/jmeter/cicd-endurance-results.csv \
                  -e -f -o /home/myagent/myagent/_work/1/jmeter/cicd-endurance-test-report.html \
                  -j /home/myagent/myagent/_work/1/jmeter/cicd-endurance-test.log
                
                cd /home/myagent/myagent/_work/1/jmeter/
                ls -la
                echo "---------------------cicd-endurance-results.csv---------------------"
                cat cicd-endurance-results.csv
                echo "---------------------cicd-endurance-test-report.html---------------------"
                cat cicd-endurance-test-report.html
                echo "---------------------cicd-endurance-test.log---------------------"
                cat cicd-endurance-test.log
# - stage: PerformanceTest
#   displayName: Performance Tests
#   jobs:
#   - job: JMeterTests
#     displayName: JMeter Tests
#     pool:
#       name: myAgentPool
#       vmImage: 'ubuntu-18.04'
#     steps:
#       - task: Bash@3
#         displayName: Install JMeter
#         inputs:
#           targetType: 'inline'
#           script: |
#             sudo apt-get install openjdk-11-jre-headless -y
#             wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.1.tgz -O jmeter.tgz
#             tar -xzvf jmeter.tgz
      
#       - task: Bash@3
#         displayName: Run JMeter tests
#         inputs:
#           targetType: 'inline'
#           script: |
#             apache-jmeter-5.4.1/bin/jmeter -n -t automatedtesting/jmeter/endurance.jmx \
#               -l automatedtesting/jmeter/endurance-results.csv \
#               -e -f -o automatedtesting/jmeter/endurance-test-report.html \
#               -j automatedtesting/jmeter/endurance-test.log